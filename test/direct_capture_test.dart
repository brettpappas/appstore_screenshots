import 'package:flutter_test/flutter_test.dart';
import 'package:appstore_screenshots/appstore_screenshots.dart';
import 'package:flutter/material.dart';
import 'dart:io';

void main() {
  testWidgets('Direct screenshot capture test', (WidgetTester tester) async {
    // Create a simple screenshot manager
    final manager = ScreenshotManager();

    // Create a simple screen config
    final screenConfig = ScreenConfig(
      id: 'test_welcome',
      screen: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Color(0xFF667EEA), Color(0xFF764BA2)],
          ),
        ),
        child: const Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.waving_hand, size: 80, color: Colors.white),
              SizedBox(height: 20),
              Text(
                'Welcome!',
                style: TextStyle(fontSize: 32, fontWeight: FontWeight.bold, color: Colors.white),
              ),
              SizedBox(height: 12),
              Text(
                'Test screenshot from headless CLI',
                style: TextStyle(fontSize: 18, color: Colors.white70),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
      title: Text('Test Welcome Screen'),
      description: Text('Generated by headless Flutter CLI'),
      backgroundColor: Colors.purple,
      templateName: 'standard',
      deviceType: DeviceType.iphone61,
      deviceSizeScale: 0.85,
      showDeviceFrame: true,
    );

    // Create output directory
    final outputDir = Directory('example_screenshots');
    if (!await outputDir.exists()) {
      await outputDir.create(recursive: true);
    }

    print('üì∏ Attempting to capture test screenshot...');

    try {
      // Try to capture the screenshot directly
      final result = await manager.captureScreen(
        screenConfig: screenConfig,
        outputPath: 'example_screenshots',
        pixelRatio: 2.0,
      );

      if (result != null) {
        print('‚úÖ Screenshot captured successfully: $result');

        // Verify the file exists
        final file = File(result);
        if (await file.exists()) {
          final size = await file.length();
          print('üìÑ File size: ${(size / 1024).toStringAsFixed(1)} KB');
        }
      } else {
        print('‚ùå Screenshot capture returned null');
      }
    } catch (e) {
      print('‚ùå Error capturing screenshot: $e');
    }

    // List all files in the output directory
    print('\nüìÅ Files in example_screenshots directory:');
    final files = await outputDir.list().toList();
    for (final file in files) {
      if (file is File) {
        final size = await file.length();
        print('  üìÑ ${file.path.split('/').last} (${(size / 1024).toStringAsFixed(1)} KB)');
      }
    }
  });
}
